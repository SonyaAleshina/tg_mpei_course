//https://leetcode.com/problems/rotting-oranges/
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size(); 
        int m = grid[0].size(); 
        
        queue<pair<int,int>> q; 
        
        int fresh = 0; 
        int rotten = 0; 
        
        int lvl = 0; 
        
        for(int i=0; i<n; i++)
            for(int j=0; j<m; j++)
            {
                if (grid[i][j]==1) fresh++; 
                if (grid[i][j]==2) q.push(make_pair(i,j)); 
            }
        
        if (fresh == 0) return 0; 
        
        while (!q.empty())
        {
            int l = q.size(); 
            for(int i=0; i<l; i++)
            {
                pair<int, int> p = q.front(); 
                q.pop(); 
                
                if (p.first+1<n&&p.second<m) 
                {
                    if (grid[p.first+1][p.second]==1)
                    {
                     grid[p.first+1][p.second] = 2; 
                     rotten++; 
                     q.push(make_pair(p.first+1,p.second));                        
                    } 
                }
                
                if (p.first<n&&p.second+1<m) 
                {
                    if (grid[p.first][p.second+1]==1)
                    {
                     grid[p.first][p.second+1] = 2; 
                     rotten++; 
                     q.push(make_pair(p.first,p.second+1));                        
                    } 
                }
                
                if (p.first-1>=0&&p.second<m) 
                {
                    if (grid[p.first-1][p.second]==1)
                    {
                     grid[p.first-1][p.second] = 2; 
                     rotten++; 
                     q.push(make_pair(p.first-1,p.second));                        
                    } 
                }

               if (p.first<n&&p.second-1>=0) 
                {
                    if (grid[p.first][p.second-1]==1)
                    {
                     grid[p.first][p.second-1] = 2; 
                     rotten++; 
                     q.push(make_pair(p.first,p.second-1));                        
                    } 
                }
            }
            lvl++; 
        }
        
        if (fresh == rotten) return (lvl-1); 
          else return -1; 
    }
};
