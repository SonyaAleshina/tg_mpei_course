//https://leetcode.com/problems/find-bottom-left-tree-value/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
void Left(TreeNode* tree, int &i, int &val, int j)
{
    int i1 = i; int val1;
    if (j==1)
    val=tree->val; 

    if (tree->left!=nullptr) {i++; Left(tree->left, i, val, 1);}
    
    if (tree->right!=nullptr) {i1++; if (j==1) Left(tree->right, i1, val1, 1);
                                        else Left(tree->right, i1, val1, 0);}
    
    if (i<i1) {val=val1; i=i1;}
    
}
    int findBottomLeftValue(TreeNode* root) {
        int i,x,i1; 
        
           i=0; x=root->val;
             int x1=x; 
             i1=0; 
           if (root->left!=nullptr) {i++; Left(root->left, i, x, 1); }
           if (root->right!=nullptr) {i1++; Left(root->right, i1,x1, 1) ; }
  
             if (i<i1||i==0) x=x1;
             return x;


    }
};
