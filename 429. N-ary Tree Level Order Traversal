//https://leetcode.com/problems/n-ary-tree-level-order-traversal/
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
void Levels(Node* tree, vector<vector<int>> &x, int k)
{

    if (x.size()<k) {vector<int> y(0); 
                     y.push_back(tree->val);
                     x.push_back(y);}
     else x[k-1].push_back(tree->val);   
    
     int n = tree->children.size(); 
     k++;
         
    for (int i=0;i<n;i++)
       if (tree->children[i]!=nullptr) Levels(tree->children[i],x, k);
}
    vector<vector<int>> levelOrder(Node* root) {
      vector<vector<int>> dop(0); 
    if (root==nullptr) return dop; 
        else 
        {
            Levels(root,dop,1);
            return dop; 
        }
    }
};
