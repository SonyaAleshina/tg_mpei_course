//https://leetcode.com/problems/pacific-atlantic-water-flow/
class Solution {
public:
void DFS(vector<vector<int>> &matr, vector<vector<int>> &x, int i, int j, int k)
{
    if (i<0||j<0||i>=matr.size()||j>=matr[0].size()||x[i][j]==1)
        return; 
    if (matr[i][j]<k)
    {
        return; 
    }
    x[i][j]=1; 
    k=matr[i][j]; 
    
    
    DFS(matr, x, i+1, j, k); 
    DFS(matr, x, i, j+1, k); 
    DFS(matr, x, i-1, j, k); 
    DFS(matr, x, i, j-1, k); 
    
}
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& matrix) {
        vector<vector<int>> x(0); 
        if (matrix.size()==0||matrix[0].size()==0) return x; 
        
        int m=matrix.size(); 
        int n=matrix[0].size(); 
        
        vector<vector<int>> B(m,vector<int>(n,0)); 
        vector<vector<int>> C(m,vector<int>(n,0)); 
      
        
        for (int i=0; i<m; i++)
        {
     
            DFS(matrix,B,i,0,0); 
        
            DFS(matrix,C,i,n-1,0);
        }
        
        for(int i=0; i<n; i++)
        {
          
            DFS(matrix,B,0,i,0);
            
            DFS(matrix,C,m-1,i,0);
        }
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if (B[i][j]==1&&C[i][j]==1)
                {
                    vector<int> y = {i,j}; 
                    x.push_back(y); 
                }
            }
        }
        return x; 
    }
};
