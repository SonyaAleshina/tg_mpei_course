//https://leetcode.com/problems/array-partition-i/
class Solution {
public:
    void quickSort(vector<int> &x, int left, int right)
{
  int c; 
  int l_hold = left; 
  int r_hold = right; 
  c = x[left];
  while (left < right) 
  {
    while ((x[right] >= c)&&(left < right))
      right--; 
    if (left != right) 
    {
      x[left] = x[right]; 
      left++; 
    }
    while ((x[left] <= c) && (left < right))
      left++; 
    if (left != right) 
    {
      x[right] = x[left]; 
      right--; 
    }
  }
  x[left] = c; 
  c = left;
  left = l_hold;
  right = r_hold;
  if (left < c) 
    quickSort(x, left, c - 1);
  if (right > c)
    quickSort(x, c + 1, right);
}
    int arrayPairSum(vector<int>& nums) {
        int n,s,i; 
        
        n=nums.size(); 
        
        if (n==2) return (min(nums[0],nums[1])); 
        
        else {
        
        quickSort(nums,0,n-1);
            s=0; 
        
            for(i=0;i<n;i+=2)
                s+=min(nums[i],nums[i+1]);
        
        return s; }
    }
};
