//https://leetcode.com/problems/ugly-number-ii/
class Solution {
public:
    void SiftDown(size_t i, vector<long long>& heap){
        while (2*i+1<heap.size()){
            int left = 2*i+1; 
            int right = 2*i+2; 
            int m = 2*i+1; 
            if (right < heap.size() && heap[right] < heap[m]){
                m = right; 
            }
            if (heap[i] < heap[m]) break; 
            swap(heap[i], heap[m]);
            i=m;
        }
    }
    
    int extractMin(vector<long long>& heap){
        int min = heap[0]; 
        swap(heap[0], heap[heap.size()-1]); 
        heap.erase(heap.begin()+heap.size()-1); 
        SiftDown(0, heap);
        return min; 
    }
    
    void Insert(long long val, vector<long long>& heap){
        heap.push_back(val); 
        SiftUp(heap.size()-1, heap); 
    }
    
    void SiftUp(size_t i, vector<long long>& heap){
        int par = (i-1)/2; 
        while (i>0 && heap[i]<heap[par]){
            swap(heap[i], heap[par]); 
            i = par; 
            par = (i-1)/2; 
        }
    }
    
    int nthUglyNumber(int n) {
        vector<long long> x = {1}; 
        unordered_set<long long> s; 
        s.insert(1); 
        vector<long long> primes = {2,3,5}; 
        
        long long min; 
        while (n>0){
            min = extractMin(x); 
            for (int d:primes){
                if (s.find(min*d) == s.end()){
                    Insert(min*d, x); 
                    s.insert(min*d); 
                }
            }
            n--; 
        }
        
        return min; 
    }
};

  /*    int nthUglyNumber(int n) {
        vector<int> x(0);
        int i = 0; int j = 0; int k = 0; 
        x.push_back(1); 
        

        while (x.size()!=n) 
        {
            int c = min(2*x[i],min(3*x[j],5*x[k])); 
            x.push_back(c); 
            if (x.back() == 2*x[i]) i++; 
            if (x.back() == 3*x[j]) j++; 
            if (x.back() == 5*x[k]) k++; 
            
        }
        
        return x[n-1]; 
    }
};*/
