//https://leetcode.com/problems/merge-intervals/
class Solution {
public:
void Union(vector<vector<int>> intervals, vector<vector<int>> &x)
{
   int i,j; 
    i=0;
     while (i<intervals.size()-1)
        {
            vector<int> dop(0); 
            if (intervals[i][1]>=intervals[i+1][0]) 
            {
              if (intervals[i][0]<intervals[i+1][0]) dop.push_back(intervals[i][0]); 
                else dop.push_back(intervals[i+1][0]); 
              if (intervals[i][1]<intervals[i+1][1]) dop.push_back(intervals[i+1][1]); 
                else dop.push_back(intervals[i][1]); 
              x.push_back(dop); 
              i+=2;
                if (i==intervals.size()-1) x.push_back(intervals[i]);
            }
            else {x.push_back(intervals[i]); i++; 
                  if (i==intervals.size()-1) x.push_back(intervals[i]);}
        }
}
bool Prov(vector<vector<int>> x)
{
    bool fl=false; int i=0; 
    while (fl==false&&i<x.size()-1)
    {
       if (x[i][1]>=x[i+1][0]) fl=true; 
         else i++; 
    }
    return fl; 
}
    

    vector<vector<int>> merge(vector<vector<int>>& intervals) {
           if (intervals.size()==0||intervals.size()==1) return intervals; 
         else 
         {
             bool fl=true; 
             sort(intervals.begin(), intervals.end());
             
             while (fl==true) 
             {
               vector<vector<int>> x(0); 
                 Union(intervals,x); 
  
                 fl=Prov(x); 
                 intervals=x; 
             }
             return intervals; 
         }
        }
};
