//https://leetcode.com/problems/sort-characters-by-frequency/
class Solution {
public:
    struct predicate
{
bool operator()(const pair<int, string> &left, const pair<int, string> &right)
{
return left.first > right.first;
}
};
    string frequencySort(string s) {
      vector<char> str(s.length()); 
   
      for (int i=0; i<s.length(); i++)
          str[i]=s[i];
        sort(str.begin(),str.end());
        
        string s1=""; 
        
        vector<string> dop(0); int i=0; 
        
        while (i<str.size())
        {
            string s2=""; bool fl=true; 
            char x=str[i]; 
            while (str[i]==x&&fl==true) 
            {
                s2+=str[i]; i++; 
                if (i==str.size()) {i--; fl=false;} 
            }
            if (fl==true) i--; 
            i++;
            dop.push_back(s2); 
        }
        
        vector <pair <int, string>> y(0); 
        
        for (i=0; i<dop.size();i++)
        {
            pair <int, string> p;
            p = make_pair (dop[i].length(), dop[i]);
            y.push_back(p); 
        }
        sort(y.begin(),y.end(),predicate());
        
        for (i=0; i<y.size(); i++)
            s1+=y[i].second; 
        
        
        
        return s1; 
    }
};
