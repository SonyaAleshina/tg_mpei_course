//https://leetcode.com/problems/find-mode-in-binary-search-tree/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
void Duplicat(TreeNode* tree, vector<int> &x, multiset<int> &s)
{
  s.insert(tree->val);
    if (s.find(tree->val)!=s.end()) 
    {if (s.count(tree->val)==2) x.push_back(tree->val);}

    if (tree->left!=nullptr) Duplicat(tree->left, x, s);
    if (tree->right!=nullptr) Duplicat(tree->right, x, s); 
    
}
    vector<int> findMode(TreeNode* root) {
        vector<int> x(0); 
        if (root==nullptr) return x;
        if (root->left==nullptr&&root->right==nullptr) {x.push_back(root->val); return x;}
        multiset<int> s; 
        Duplicat(root, x, s);
        for(int i=0;i<x.size(); i++) printf("%d ", x[i]);
        if (x.size()==0) {for(int i=0; i<s.size(); i++)
        {
            x.push_back(*s.begin()+i);
        }}
        else 
        {
            int i=0; 
            while (i<x.size()-1&&x.size()!=1)
            {
                if (s.count(x[i])<s.count(x[i+1])) x.erase(x.begin()+i);
    else {if (s.count(x[i])==s.count(x[i+1])) i++;
          else
     x.erase(x.begin()+i+1);
            
        }}}
        return x; 
    }
};
