//https://leetcode.com/problems/clone-graph/
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;

    Node() {}

    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
class Solution {
public:
Node* clone(Node* node, map<int,Node*> &visit)
{
    if (node==nullptr) return nullptr; 
    
    vector<Node*> x(0); 
    
    Node* dop = new Node(node->val, x); 
    
    visit[dop->val]=dop; 
    
    for(int i=0; i<node->neighbors.size(); i++)
    {
     if (visit.find(node->neighbors[i]->val) == visit.end())  
         dop->neighbors.push_back(clone(node->neighbors[i], visit)); 
        
        else 
            dop->neighbors.push_back(visit[node->neighbors[i]->val]); 
    }
    
    return visit[node->val]; 
    
    
}
    Node* cloneGraph(Node* node) {
        map<int,Node*> visit; 
        
        return clone(node, visit); 

    }
};
