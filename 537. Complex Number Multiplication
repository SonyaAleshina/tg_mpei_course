//https://leetcode.com/problems/complex-number-multiplication/
#include <stdlib.h>
class Solution {
public:

    string complexNumberMultiply(string a, string b) {
        int k,e,c,d,n1,n2,i,sign1,sign2,j,sign3,sign4,t; 
        //string s1,s2; 
        
        i=0; k=0; 
        
        if (a[i]=='-') {sign3=-1; 
                        i++;}
          else sign3=1; 
        
        while (a[i]!='+') i++; 
        if (a[i]=='+') j=i-1; 
        
        if (sign3>0) t=0; 
         else t=1; 
        
        while (j>=t)
        {
            k=k+(a[j]-48)*pow(10,i-j-1); 
            j--; 
        }; printf("%d\n",k);
        
        i++; 
        if (a[i]=='-') {sign1=-1; 
                       i++;}
          else sign1=1; 
        j=0;
        while (a[i]!='i') {j++;
                           i++;};
        
        e=0; //printf("%d\n",j);
        while (j>0)
        {//printf("%c\n",a[i-j]);
            e=e+(a[i-j]-48)*pow(10,j-1); 
            j--; 
        }; 
        printf("%d\n",e);
        
        i=0; 
        
        c=0; d=0;
        
        if (b[i]=='-') {sign4=-1; 
                        i++;}
          else sign4=1; 
        
        while (b[i]!='+') i++; 
        if (b[i]=='+') j=i-1;
        
        if (sign4>0) t=0; 
         else t=1; 
        
        while (j>=t)
        {
            c=c+(b[j]-48)*pow(10,i-j-1); 
            j--; 
        }; 
                
         printf("%d\n",c);
        
        i++; 
        if (b[i]=='-') {sign2=-1; 
                       i++;}
          else sign2=1; 
        j=0;
        while (b[i]!='i') {j++;
                           i++;};
        
        while (j>0)
        {
            d=d+(b[i-j]-48)*pow(10,j-1); 
            j--; 
        }; 
        
        printf("%d\n",d);
        
        n1=sign3*sign4*k*c-sign2*sign1*e*d; 
        n2=sign2*sign3*k*d+sign1*sign4*e*c;
        
        k=abs(n1); i=0; if (n1<0) i++; 
        while(k>0) 
        {i++; k=k/10;}
        
        k=abs(n2); if (n2<0) i++; 
        while(k>0) 
        {i++; k=k/10;}
        i+=2;
        
        std::string s1 = std::to_string(n1); 
        std::string s2 = std::to_string(n2);
        
        string str = s1+"+"+s2+"i";  
        
        
         return str;        
        };
    };
